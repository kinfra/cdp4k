import org.gradle.api.publish.maven.MavenPublication

plugins {
    id 'java-library'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id 'ru.kontur.kinfra.presets' version '2.0'
    id 'signing'
}

ext {
    release = "0.14"

    versions = [
        commons   : '1.7',
        io        : '1.1.1',
        logging   : '1.1',

        jackson   : '2.12.5',
        coroutines: '1.6.4',
    ]
}

archivesBaseName = "cdp4k"

allprojects {
    apply plugin: "org.jetbrains.kotlin.jvm"

    group = "ru.kontur.cdp4k"
    version = release

    repositories {
        mavenCentral()
    }

    plugins.withId("java") {
        dependencies {
            implementation platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:${versions.coroutines}")
            implementation platform("com.fasterxml.jackson:jackson-bom:${versions.jackson}")

            constraints {
                implementation "ru.kontur.kinfra:kinfra-io:${versions.io}"
                implementation "ru.kontur.kinfra:kinfra-commons:${versions.commons}"
                implementation "ru.kontur.kinfra:kinfra-logging:${versions.logging}"
            }
        }
    }

    plugins.withId("java-library") {
        version = release //todo more clever way to set version
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs += "-Xopt-in=ru.kontur.cdp4k.protocol.CdpExperimental"
        }
    }
}

dependencies {
    api "ru.kontur.kinfra:kinfra-io"
    implementation "ru.kontur.kinfra:kinfra-commons"
    implementation "ru.kontur.kinfra:kinfra-logging"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8"
    implementation "com.fasterxml.jackson.core:jackson-databind"
}

jar {
    manifest.attributes "Automatic-Module-Name": "ru.kontur.kinfra.cdp4k"
}

signing {
    sign publishing.publications
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications{
        maven(MavenPublication) {
            pom {
                name = 'kinfra-cdp4k'
                group = 'ru.kontur.kinfra'
                artifactId = 'kinfra-cdp4k'

                description = 'Library for cdp4k'
                url = 'https://github.com/kinfra/kinfra-cdp4k'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'frost13it'
                        name = 'Vladimir Petrakovich'
                        email = 'public@frostbit.tk'
                    }
                }
                scm {
                    connection = "scm:git:git://github.com:kinfra/kinfra-cdp4k.git"
                    developerConnection = 'scm:git:ssh://github.com:kinfra/kinfra-cdp4k.git'
                    url = 'https://github.com/kinfra/kinfra-cdp4k'
                }
            }
        }
    }
    repositories {
        def properties = project.properties
        def repoUrl = properties["publishing.repo.url"]
        if (repoUrl) {
            maven {
                url = repoUrl

                credentials {
                    username = properties["publishing.repo.username"]
                    password = properties["publishing.repo.password"]
                }
            }
        }
    }
}
