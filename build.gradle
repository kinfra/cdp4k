plugins {
    id "ru.kontur.library"
    id "org.jetbrains.kotlin.jvm"
}

ext {
    release = "0.2"

    versions = [
        commons: '1.4',
        io: '0.2-SNAPSHOT',
        logging: '0.14',

        jackson: '2.10.3',
        coroutines: '1.3.5',
    ]

    branch = project.properties["branch"]?.toString()
    isStableBranch = (branch == "master") || branch?.startsWith("release-")
}

archivesBaseName = "cdp4k"

allprojects {
    apply plugin: 'ru.kontur.base'

    group = "ru.kontur.cdp4k"
    version = release + (isStableBranch ? "" : "-SNAPSHOT")

    plugins.withId('java') {
        dependencies {
            allMain platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:${versions.coroutines}")
            allMain platform("com.fasterxml.jackson:jackson-bom:${versions.jackson}")

            constraints {
                allMain "ru.kontur.kinfra:kinfra-commons:${versions.commons}"
                allMain "ru.kontur.kinfra:kinfra-io:${versions.io}"
                allMain "ru.kontur.jinfra:jinfra-logging:${versions.logging}"
            }
        }
    }
}

dependencies {
    api "ru.kontur.kinfra:kinfra-io"
    api "com.fasterxml.jackson.core:jackson-core"

    implementation "ru.kontur.kinfra:kinfra-commons"
    implementation "ru.kontur.jinfra:jinfra-logging"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8"
    implementation "com.fasterxml.jackson.core:jackson-databind"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += [
            "-Xopt-in=kotlin.RequiresOptIn",
            "-Xopt-in=ru.kontur.cdp4k.protocol.CdpExperimental",
        ]
    }
}
